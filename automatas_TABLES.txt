bool EmpleadoDAO::validar(){
		if (strlen(cadena)==10){
			int estado = q0;
			for (int i = 0; i < strlen(cadena); i++)
			{
				switch (estado)
				{
				case 0:{
						   if (cadena[i] == 'E') estado = q1;
						   else estado = error;
				}break;
				case 1:{
						   if (cadena[i] == 'M') estado = q2;
						   else estado = error;
				}break;
				case 2:{
						   if (cadena[i] == 'P') estado = q3;
						   else estado = error;
				}break;
				case 3:{
						   if (cadena[i] == '_') estado = q4;
						   else estado = error;
				}break;
				case 4:{
						   if (cadena[i] == '0' || cadena[i] == '1' || cadena[i] == '2' || cadena[i] == '3' || cadena[i] == '4' || cadena[i] == '5' || cadena[i] == '6' || cadena[i] == '7' || cadena[i] == '8' || cadena[i] == '9') estado = q4;
						   else estado = error;
				}break;
				case -1:{
							return false;
				}break;
				default: estado = error; break;
				}
			}
			if (estado == q4) return true;
			else return false;
		}
		else return false;
}

bool ClienteDAO::validar(){
		if (strlen(cadena)==10){
			int estado = q0;
			for (int i = 0; i < strlen(cadena); i++)
			{
				switch (estado)
				{
				case 0:{
						   if (cadena[i] == 'C') estado = q1;
						   else estado = error;
				}break;
				case 1:{
						   if (cadena[i] == 'L') estado = q2;
						   else estado = error;
				}break;
				case 2:{
						   if (cadena[i] == 'I') estado = q3;
						   else estado = error;
				}break;
				case 3:{
						   if (cadena[i] == '_') estado = q4;
						   else estado = error;
				}break;
				case 4:{
						   if (cadena[i] == '0' || cadena[i] == '1' || cadena[i] == '2' || cadena[i] == '3' || cadena[i] == '4' || cadena[i] == '5' || cadena[i] == '6' || cadena[i] == '7' || cadena[i] == '8' || cadena[i] == '9') estado = q4;
						   else estado = error;
				}break;
				case -1:{
							return false;
				}break;
				default: estado = error; break;
				}
			}
			if (estado == q4) return true;
			else return false;
		}
		else return false;
}





bool ProductoDAO::validar(){
		if (strlen(cadena)==10){
			int estado = q0;
			for (int i = 0; i < strlen(cadena); i++)
			{
				switch (estado)
				{
				case 0:{
						   if (cadena[i] == 'P') estado = q1;
						   else estado = error;
				}break;
				case 1:{
						   if (cadena[i] == 'R') estado = q2;
						   else estado = error;
				}break;
				case 2:{
						   if (cadena[i] == 'O') estado = q3;
						   else estado = error;
				}break;
				case 3:{
						   if (cadena[i] == 'D') estado = q4;
						   else estado = error;
				}break;
				case 4:{
						   if (cadena[i] == '_') estado = q5;
						   else estado = error;
				}break;
				case 5:{
						   if (cadena[i] == '0' || cadena[i] == '1' || cadena[i] == '2' || cadena[i] == '3' || cadena[i] == '4' || cadena[i] == '5' || cadena[i] == '6' || cadena[i] == '7' || cadena[i] == '8' || cadena[i] == '9') estado = q5;
						   else estado = error;
				}break;
				case -1:{
							return false;
				}break;
				default: estado = error; break;
				}
			}
			if (estado == q5) return true;
			else return false;
		}
		else return false;
}





bool ProveedorDAO::validar(){
		if (strlen(cadena)==10){
			int estado = q0;
			for (int i = 0; i < strlen(cadena); i++)
			{
				switch (estado)
				{
				case 0:{
						   if (cadena[i] == 'P') estado = q1;
						   else estado = error;
				}break;
				case 1:{
						   if (cadena[i] == 'R') estado = q2;
						   else estado = error;
				}break;
				case 2:{
						   if (cadena[i] == 'O') estado = q3;
						   else estado = error;
				}break;
				case 3:{
						   if (cadena[i] == 'V') estado = q4;
						   else estado = error;
				}break;
				case 4:{
						   if (cadena[i] == '_') estado = q5;
						   else estado = error;
				}break;
				case 5:{
						   if (cadena[i] == '0' || cadena[i] == '1' || cadena[i] == '2' || cadena[i] == '3' || cadena[i] == '4' || cadena[i] == '5' || cadena[i] == '6' || cadena[i] == '7' || cadena[i] == '8' || cadena[i] == '9') estado = q5;
						   else estado = error;
				}break;
				case -1:{
							return false;
				}break;
				default: estado = error; break;
				}
			}
			if (estado == q5) return true;
			else return false;
		}
		else return false;
}




bool Ingreso_ProductoDAO::validar(){
		if (strlen(cadena)==10){
			int estado = q0;
			for (int i = 0; i < strlen(cadena); i++)
			{
				switch (estado)
				{
				case 0:{
						   if (cadena[i] == 'I') estado = q1;
						   else estado = error;
				}break;
				case 1:{
						   if (cadena[i] == 'N') estado = q2;
						   else estado = error;
				}break;
				case 2:{
						   if (cadena[i] == 'G') estado = q3;
						   else estado = error;
				}break;
				case 3:{
						   if (cadena[i] == '_') estado = q4;
						   else estado = error;
				}break;
				case 4:{
						   if (cadena[i] == '0' || cadena[i] == '1' || cadena[i] == '2' || cadena[i] == '3' || cadena[i] == '4' || cadena[i] == '5' || cadena[i] == '6' || cadena[i] == '7' || cadena[i] == '8' || cadena[i] == '9') estado = q4;
						   else estado = error;
				}break;
				case -1:{
							return false;
				}break;
				default: estado = error; break;
				}
			}
			if (estado == q4) return true;
			else return false;
		}
		else return false;
}






bool Salida_ProductoDAO::validar(){
		if (strlen(cadena)==10){
			int estado = q0;
			for (int i = 0; i < strlen(cadena); i++)
			{
				switch (estado)
				{
				case 0:{
						   if (cadena[i] == 'S') estado = q1;
						   else estado = error;
				}break;
				case 1:{
						   if (cadena[i] == 'A') estado = q2;
						   else estado = error;
				}break;
				case 2:{
						   if (cadena[i] == 'L') estado = q3;
						   else estado = error;
				}break;
				case 3:{
						   if (cadena[i] == 'I') estado = q4;
						   else estado = error;
				}break;
				case 4:{
						   if (cadena[i] == '_') estado = q5;
						   else estado = error;
				}break;
				case 5:{
						   if (cadena[i] == '0' || cadena[i] == '1' || cadena[i] == '2' || cadena[i] == '3' || cadena[i] == '4' || cadena[i] == '5' || cadena[i] == '6' || cadena[i] == '7' || cadena[i] == '8' || cadena[i] == '9') estado = q5;
						   else estado = error;
				}break;
				case -1:{
							return false;
				}break;
				default: estado = error; break;
				}
			}
			if (estado == q5) return true;
			else return false;
		}
		else return false;
}

